pragma solidity {{solidityVersion}};

import "Ticker.sol";
import "Store.sol";
import "Submarket.sol";
import "ownable.sol";

contract Order is ownable {

  function () payable {}

    {{#each schemas.Order.variables}}
    {{>variable.sol variable=this}}
    {{/each}}

    {{#each schemas.Order.structArrays}}
    {{>structArray.sol struct=this}}
    {{/each}}

    {{#each schemas.Order.structs}}
    {{>struct.sol struct=this}}
    {{/each}}

	function create(
		address _buyer
		,address _storeAddr
		,address _submarketAddr
		,address _affiliate
    ,uint _bounty
     //TODO: possible vulnerability, the seller could reorder atteempt to Products to force someone to buy a different product, may be an opportunity to use product hashes instead
		,uint[] _productIndexes
		,uint[] _productQuantities
    //TODO: again, maybe the following can be gamed
		,uint _transportIndex
		,address tickerAddr
	) payable {

		if(isCreated)
			throw;

		isCreated = true;

		blockNumber = block.number;

		buyer = _buyer;
		storeAddr = _storeAddr;
    //TODO: check if submarket is in list of approved submarkets
		submarketAddr = _submarketAddr;
		affiliate = _affiliate;
    bounty = _bounty;

    //TODO: ticker needs to be somehow approved by both buyer and seller, maybe it should be an option alowing the resolution market
		ticker = Ticker(tickerAddr);

		Store store = Store(_storeAddr);

		if(!store.isOpen())
			throw;

		storeCurrency = bytes4(store.currency());

		for(uint i = 0; i< _productIndexes.length; i++) {

			uint[3] memory productParams = [
				_productIndexes[i],									//productIndex
				store.getProductTeraprice(_productIndexes[i]),		//productTeraprice
				_productQuantities[i]								//productQuantity
			];

			if(!store.getProductIsActive(productParams[0]))
				throw;

			Products.push(Product(
				productParams[0],
				productParams[1],
				store.getProductFileHash(productParams[0]),
				productParams[2]
			));

			productsTeratotal = productsTeratotal + (productParams[1] * productParams[2]);
		}

		if(productsTeratotal < store.minProductsTeratotal())
			throw;

		if(!store.getTransportIsActive(_transportIndex))
			throw;

		transportTeraprice = store.getTransportTeraprice(_transportIndex);
		transportFileHash = store.getTransportFileHash(_transportIndex);

		bufferCentiperun = store.bufferCentiperun();

		if(_affiliate != address(0)) {
			affiliateFeeCentiperun = store.affiliateFeeCentiperun();
		}

		if(submarketAddr != address(0)) {
      //TODO: change this to use an instance of the submarket that is not infosphered
      //TODO: test submarkets and orders with submarkets
			var submarket = Submarket(_submarketAddr);
			if(!submarket.isOpen())
				throw;
			submarketCurrency = submarket.currency();
			escrowFeeTerabase = submarket.escrowFeeTerabase();
			escrowFeeCentiperun = submarket.escrowFeeCentiperun();
			disputeSeconds = store.disputeSeconds();
		}

    //TDDO: the wording on the transportTeraprice variable may need to be fixed to match the other parameters
		storeTeratotal = productsTeratotal + transportTeraprice;

    computeTotals();
	}

  function computeTotals() {
    uint storeTerawei = ticker.convert(storeTeratotal, storeCurrency, bytes4('WEI'));

    uint escrowBaseTerawei;
    if (escrowFeeTerabase > 0) {
      escrowBaseTerawei = ticker.convert(escrowFeeTerabase, submarketCurrency, bytes4('WEI'));
    }

    uint escrowFeeTerawei;
    if (escrowFeeTerabase > 0) {
      escrowFeeTerawei = storeTerawei * escrowFeeCentiperun / CENTIBASE;
    }

    uint affiliateTerawei;
    if (affiliateFeeCentiperun > 0) {
      affiliateTerawei = storeTerawei * affiliateFeeCentiperun / CENTIBASE;
    }

    uint subTotalTerawei = storeTerawei + escrowBaseTerawei + escrowFeeTerawei + affiliateTerawei;

    uint bufferTerawei;
    if (bufferCentiperun > 0) {
      bufferTerawei = subTotalTerawei * bufferCentiperun / CENTIBASE;
    }

    totals.store = storeTerawei / TERABASE;
    totals.escrowBase = escrowBaseTerawei / TERABASE;
    totals.escrowFee = escrowFeeTerawei / TERABASE;
    totals.affiliate = affiliateTerawei / TERABASE;
    totals.buffer = bufferTerawei / TERABASE;

    totals.total = (subTotalTerawei + bufferTerawei) / TERABASE + bounty;
  }

	function addMessage(bytes32 fileHash) {
    address user = msg.sender;

		if(
			user != buyer
			&& user != storeAddr
			&& user != submarketAddr
		)
			throw;

		Messages.push(Message(block.number, user, fileHash));
	}

	function addUpdate(uint _status) private{
		status = _status;
		Updates.push(Update(block.number, msg.sender, _status));
	}

	function cancel() {

		if(status != INITIALIZED)
			throw;

    //TODO: check all cases in which a storeAddr could send this request
		if(msg.sender != buyer && msg.sender != storeAddr)
			throw;

		suicide(buyer);
	}

	function markAsShipped() {
		if(status != INITIALIZED)
			throw;

    //TODO: check all cases in which a storeAddr could send this request
		if(msg.sender != storeAddr)
			throw;

    if(this.balance < totals.total) throw;
		//don't allow to mark as SHIPPED on same block that a withdrawl is made
		//if(receivedAtBlockNumber == block.number)
		//	throw;

		shippedAt = now;
		addUpdate(SHIPPED);
	}

	function finalize() {
    if((status==SHIPPED && now - shippedAt > disputeSeconds) || (status==DISPUTED && now - disputedAt > disputeSeconds)) {
  		computePayouts();
  		addUpdate(FINALIZED);
      return;
    }

  	if(status != SHIPPED && status != RESOLVED) throw;

		if(msg.sender != buyer) throw;

		computePayouts();

    if(this.balance < payouts.total) throw;

		addUpdate(FINALIZED);
	}

	function dispute() {
		if(msg.sender != buyer)
			throw;

		if(status != SHIPPED)
			throw;

		if(submarketAddr==address(0))
			throw;

		if(now - shippedAt > disputeSeconds)
			throw;

		addUpdate(DISPUTED);
		disputedAt=now;

	}

  //TODO: add buyerAmountCentiperun to the payout calculation
	function resolve(uint _buyerAmountCentiperun) {

		if(status!=DISPUTED)
			throw;

		if(msg.sender != submarketAddr)
			throw;

		buyerAmountCentiperun = _buyerAmountCentiperun;

    computePayouts();

    addUpdate(RESOLVED);
	}

	 function computePayouts() {
     uint storeTerawei = ticker.convert(storeTeratotal, storeCurrency, bytes4('WEI'));

     uint escrowBaseTerawei;
     if (escrowFeeTerabase > 0) {
       escrowBaseTerawei = ticker.convert(escrowFeeTerabase, submarketCurrency, bytes4('WEI'));
     }

     uint escrowFeeTerawei;
     if (escrowFeeTerabase > 0) {
       escrowFeeTerawei = storeTerawei * escrowFeeCentiperun / CENTIBASE;
     }

     uint affiliateTerawei;
     if (affiliateFeeCentiperun > 0) {
       affiliateTerawei = storeTerawei * affiliateFeeCentiperun / CENTIBASE;
     }

     uint totalTerawei = storeTerawei + escrowBaseTerawei + escrowFeeTerawei + affiliateTerawei;

     payouts.store = storeTerawei / TERABASE;
     payouts.escrow = (escrowBaseTerawei + escrowFeeTerawei) / TERABASE;
     payouts.affiliate = affiliateTerawei / TERABASE;
     payouts.total = totalTerawei / TERABASE;
	 }

	 function release(address addr, uint amount) private {
     if(status != FINALIZED) throw;

    uint reward = bounty / 4;
    if(reward > amount) reward = amount;

	 	if(!msg.sender.send(reward))
	 		throw;

    if(amount - reward < 0) return;
    if(addr == address(0)) addr = buyer;
	 	if(!addr.send(amount - reward))
	 		throw;

	 }

	function releaseBuyerPayout() {
    if(!isStoreAmountReleased || !isEscrowAmountReleased || !isAffiliateAmountReleased){
      throw;
    }
    suicide(buyer);
	}

  function releaseStorePayout() {
    if(isStoreAmountReleased) throw;
    isStoreAmountReleased = true;
    release(storeAddr,payouts.store);
  }

  function releaseEscrowAPayout() {
    if(isEscrowAmountReleased) throw;
    isEscrowAmountReleased = true;
    release(submarketAddr,payouts.escrow);
  }

  function releaseAffiliatePayout() {
    if(isAffiliateAmountReleased) throw;
    isAffiliateAmountReleased = true;
    release(affiliate,payouts.affiliate);
  }
}