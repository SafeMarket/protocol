pragma solidity {{solidityVersion}};

import "ownable.sol";
import "Store.sol";
import "executor.sol";

contract StoreReg is executor, ownable {
	event Registration(address storeAddr);

  {{#each schemas.StoreReg.variables}}
  {{>variable.sol variable=this}}
  {{/each}}

  {{#each schemas.StoreReg.mappings}}
  {{>mapping.sol mapping=this}}
  {{/each}}

  {{#each schemas.StoreReg.arrays}}
  {{>array.sol array=this}}
  {{/each}}

  function getCreatedStoresLength(address creator) constant returns(uint) {
    return createdAddrs[creator].length;
  }

  function getCreatedStoreAddr(address creator, uint index) constant returns(address) {
    return createdAddrs[creator][index];
  }

	function isRegistered(address addr) constant returns(bool) {
		return registeredAddrs[addr];
	}

  function StoreReg(address _aliasRegAddr) {
    aliasRegAddr = _aliasRegAddr;
  }

	function create(uint[] calldataLengths, bytes calldatas) {
		Store store = new Store();
    store.setAliasReg(aliasRegAddr);
		address storeAddr = address(store);
    _execute(storeAddr, calldataLengths, calldatas);
		store.setOwner(msg.sender);
		registeredAddrsArray.push(storeAddr);
		registeredAddrs[storeAddr] = true;

    createdAddrs[msg.sender].push(storeAddr);

    Registration(storeAddr);
	}
}