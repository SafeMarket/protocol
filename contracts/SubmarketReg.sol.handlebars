pragma solidity {{solidityVersion}};

import "ownable.sol";
import "Submarket.sol";
import "executor.sol";

contract SubmarketReg is ownable, executor {
  event Registration(address submarketAddr);

  {{#each schemas.SubmarketReg.variables}}
  {{>variable.sol variable=this}}
  {{/each}}

  {{#each schemas.SubmarketReg.mappings}}
  {{>mapping.sol mapping=this}}
  {{/each}}

  {{#each schemas.SubmarketReg.arrays}}
  {{>array.sol array=this}}
  {{/each}}

  function getCreatedSubmarketCount(address creator) constant returns(uint) {
    return createdAddrs[creator].length;
  }

  function getCreatedSubmarketAddr(address creator, uint index) constant returns(address) {
    return createdAddrs[creator][index];
  }

  function isRegistered(address addr) constant returns(bool) {
    return registeredAddrs[addr];
  }

	function SubmarketReg(address _aliasRegAddr) {
		aliasRegAddr = _aliasRegAddr;
	}

	function create(uint[] calldataLengths, bytes calldatas) {
    Submarket submarket = new Submarket();
    submarket.setAliasReg(aliasRegAddr);
    address submarketAddr = address(submarket);
    _execute(submarketAddr, calldataLengths, calldatas);
    submarket.setOwner(msg.sender);
    registeredAddrsArray.push(submarketAddr);
    registeredAddrs[submarketAddr] = true;

    createdAddrs[msg.sender].push(submarketAddr);

    Registration(submarketAddr);
  }
}