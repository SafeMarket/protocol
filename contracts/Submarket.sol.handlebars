pragma solidity {{solidityVersion}};

import "forumable.sol";
import "approvesAliases.sol";
import "Order.sol";

contract Submarket is ownable, forumable {

  function () payable {}

  {{#each schemas.Submarket.variables}}
  {{>variable.sol variable=this}}
  {{/each}}

  {{#each schemas.Submarket.mappings}}
  {{>mapping.sol mapping=this}}
  {{/each}}

  {{#each schemas.Submarket.structArrays}}
  {{>structArray.sol struct=this}}
  {{/each}}

  function resolve(address orderAddr, uint buyerAmountCentiperun) requireOwnership {
    Order(orderAddr).resolve(buyerAmountCentiperun);
    verifiedBuyers[orderAddr] = true;
  }

  function addReview(uint8 score, bytes32 fileHash) {
    if(verifiedBuyers[msg.sender])
    throw;

    //TODO: magic numbers are bad, 5 should be a constant
    if(score > 5)
    throw;

    Review memory review;
    if(reviewIndices[msg.sender] == 0) {
      reviewIndices[msg.sender] = Reviews.length;
      Reviews.length = Reviews.length+1;
    }

    review.blockNumber = block.number;
    review.score = score;
    review.fileHash = fileHash;

    Reviews[reviewIndices[msg.sender]] = review;
  }
}
